/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationBundle } from './ApplicationBundle';
import {
    ApplicationBundleFromJSON,
    ApplicationBundleFromJSONTyped,
    ApplicationBundleToJSON,
} from './ApplicationBundle';
import type { ApplicationBundleAutoUpgrade } from './ApplicationBundleAutoUpgrade';
import {
    ApplicationBundleAutoUpgradeFromJSON,
    ApplicationBundleAutoUpgradeFromJSONTyped,
    ApplicationBundleAutoUpgradeToJSON,
} from './ApplicationBundleAutoUpgrade';
import type { KubernetesClusterAPI } from './KubernetesClusterAPI';
import {
    KubernetesClusterAPIFromJSON,
    KubernetesClusterAPIFromJSONTyped,
    KubernetesClusterAPIToJSON,
} from './KubernetesClusterAPI';
import type { KubernetesClusterNetwork } from './KubernetesClusterNetwork';
import {
    KubernetesClusterNetworkFromJSON,
    KubernetesClusterNetworkFromJSONTyped,
    KubernetesClusterNetworkToJSON,
} from './KubernetesClusterNetwork';
import type { KubernetesClusterOpenStack } from './KubernetesClusterOpenStack';
import {
    KubernetesClusterOpenStackFromJSON,
    KubernetesClusterOpenStackFromJSONTyped,
    KubernetesClusterOpenStackToJSON,
} from './KubernetesClusterOpenStack';
import type { KubernetesClusterWorkloadPools } from './KubernetesClusterWorkloadPools';
import {
    KubernetesClusterWorkloadPoolsFromJSON,
    KubernetesClusterWorkloadPoolsFromJSONTyped,
    KubernetesClusterWorkloadPoolsToJSON,
} from './KubernetesClusterWorkloadPools';
import type { OpenstackMachinePool } from './OpenstackMachinePool';
import {
    OpenstackMachinePoolFromJSON,
    OpenstackMachinePoolFromJSONTyped,
    OpenstackMachinePoolToJSON,
} from './OpenstackMachinePool';
import type { ResourceMetadata } from './ResourceMetadata';
import {
    ResourceMetadataFromJSON,
    ResourceMetadataFromJSONTyped,
    ResourceMetadataToJSON,
} from './ResourceMetadata';

/**
 * Kubernetes cluster creation parameters.
 * @export
 * @interface KubernetesCluster
 */
export interface KubernetesCluster {
    /**
     * 
     * @type {ResourceMetadata}
     * @memberof KubernetesCluster
     */
    metadata?: ResourceMetadata;
    /**
     * Cluster name.
     * @type {string}
     * @memberof KubernetesCluster
     */
    name: string;
    /**
     * The region to provision the cluster in.
     * @type {string}
     * @memberof KubernetesCluster
     */
    region: string;
    /**
     * The Kuebernetes version.  This should be derived from image metadata.
     * @type {string}
     * @memberof KubernetesCluster
     */
    version: string;
    /**
     * 
     * @type {ApplicationBundle}
     * @memberof KubernetesCluster
     */
    applicationBundle?: ApplicationBundle;
    /**
     * 
     * @type {ApplicationBundleAutoUpgrade}
     * @memberof KubernetesCluster
     */
    applicationBundleAutoUpgrade?: ApplicationBundleAutoUpgrade;
    /**
     * 
     * @type {KubernetesClusterOpenStack}
     * @memberof KubernetesCluster
     */
    openstack?: KubernetesClusterOpenStack;
    /**
     * 
     * @type {KubernetesClusterNetwork}
     * @memberof KubernetesCluster
     */
    network?: KubernetesClusterNetwork;
    /**
     * 
     * @type {KubernetesClusterAPI}
     * @memberof KubernetesCluster
     */
    api?: KubernetesClusterAPI;
    /**
     * 
     * @type {OpenstackMachinePool}
     * @memberof KubernetesCluster
     */
    controlPlane?: OpenstackMachinePool;
    /**
     * 
     * @type {KubernetesClusterWorkloadPools}
     * @memberof KubernetesCluster
     */
    workloadPools: KubernetesClusterWorkloadPools;
}

/**
 * Check if a given object implements the KubernetesCluster interface.
 */
export function instanceOfKubernetesCluster(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "workloadPools" in value;

    return isInstance;
}

export function KubernetesClusterFromJSON(json: any): KubernetesCluster {
    return KubernetesClusterFromJSONTyped(json, false);
}

export function KubernetesClusterFromJSONTyped(json: any, ignoreDiscriminator: boolean): KubernetesCluster {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': !exists(json, 'metadata') ? undefined : ResourceMetadataFromJSON(json['metadata']),
        'name': json['name'],
        'region': json['region'],
        'version': json['version'],
        'applicationBundle': !exists(json, 'applicationBundle') ? undefined : ApplicationBundleFromJSON(json['applicationBundle']),
        'applicationBundleAutoUpgrade': !exists(json, 'applicationBundleAutoUpgrade') ? undefined : ApplicationBundleAutoUpgradeFromJSON(json['applicationBundleAutoUpgrade']),
        'openstack': !exists(json, 'openstack') ? undefined : KubernetesClusterOpenStackFromJSON(json['openstack']),
        'network': !exists(json, 'network') ? undefined : KubernetesClusterNetworkFromJSON(json['network']),
        'api': !exists(json, 'api') ? undefined : KubernetesClusterAPIFromJSON(json['api']),
        'controlPlane': !exists(json, 'controlPlane') ? undefined : OpenstackMachinePoolFromJSON(json['controlPlane']),
        'workloadPools': KubernetesClusterWorkloadPoolsFromJSON(json['workloadPools']),
    };
}

export function KubernetesClusterToJSON(value?: KubernetesCluster | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ResourceMetadataToJSON(value.metadata),
        'name': value.name,
        'region': value.region,
        'version': value.version,
        'applicationBundle': ApplicationBundleToJSON(value.applicationBundle),
        'applicationBundleAutoUpgrade': ApplicationBundleAutoUpgradeToJSON(value.applicationBundleAutoUpgrade),
        'openstack': KubernetesClusterOpenStackToJSON(value.openstack),
        'network': KubernetesClusterNetworkToJSON(value.network),
        'api': KubernetesClusterAPIToJSON(value.api),
        'controlPlane': OpenstackMachinePoolToJSON(value.controlPlane),
        'workloadPools': KubernetesClusterWorkloadPoolsToJSON(value.workloadPools),
    };
}

