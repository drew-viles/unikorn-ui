/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationBundle } from './ApplicationBundle';
import {
    ApplicationBundleFromJSON,
    ApplicationBundleFromJSONTyped,
    ApplicationBundleToJSON,
} from './ApplicationBundle';
import type { ApplicationBundleAutoUpgrade } from './ApplicationBundleAutoUpgrade';
import {
    ApplicationBundleAutoUpgradeFromJSON,
    ApplicationBundleAutoUpgradeFromJSONTyped,
    ApplicationBundleAutoUpgradeToJSON,
} from './ApplicationBundleAutoUpgrade';
import type { KubernetesResourceStatus } from './KubernetesResourceStatus';
import {
    KubernetesResourceStatusFromJSON,
    KubernetesResourceStatusFromJSONTyped,
    KubernetesResourceStatusToJSON,
} from './KubernetesResourceStatus';

/**
 * A control plane.
 * @export
 * @interface ControlPlane
 */
export interface ControlPlane {
    /**
     * 
     * @type {KubernetesResourceStatus}
     * @memberof ControlPlane
     */
    status?: KubernetesResourceStatus;
    /**
     * The name of the resource.
     * @type {string}
     * @memberof ControlPlane
     */
    name: string;
    /**
     * 
     * @type {ApplicationBundle}
     * @memberof ControlPlane
     */
    applicationBundle: ApplicationBundle;
    /**
     * 
     * @type {ApplicationBundleAutoUpgrade}
     * @memberof ControlPlane
     */
    applicationBundleAutoUpgrade?: ApplicationBundleAutoUpgrade;
}

/**
 * Check if a given object implements the ControlPlane interface.
 */
export function instanceOfControlPlane(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "applicationBundle" in value;

    return isInstance;
}

export function ControlPlaneFromJSON(json: any): ControlPlane {
    return ControlPlaneFromJSONTyped(json, false);
}

export function ControlPlaneFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControlPlane {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : KubernetesResourceStatusFromJSON(json['status']),
        'name': json['name'],
        'applicationBundle': ApplicationBundleFromJSON(json['applicationBundle']),
        'applicationBundleAutoUpgrade': !exists(json, 'applicationBundleAutoUpgrade') ? undefined : ApplicationBundleAutoUpgradeFromJSON(json['applicationBundleAutoUpgrade']),
    };
}

export function ControlPlaneToJSON(value?: ControlPlane | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': KubernetesResourceStatusToJSON(value.status),
        'name': value.name,
        'applicationBundle': ApplicationBundleToJSON(value.applicationBundle),
        'applicationBundleAutoUpgrade': ApplicationBundleAutoUpgradeToJSON(value.applicationBundleAutoUpgrade),
    };
}

