/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A bundle of applications. This forms the basis of resource versions. Bundles marked
 * as preview should not be selected by default, and end of life bundles should not be
 * used to avoid unnecessary upgrades. If enabled, automatic upgrades will occur if
 * a newer version of a bundle exists that is not in preview. When a bundle's end of
 * life expires, resources will undergo a foreced upgrade, regardless of whether
 * automatic upgrade is enabled for a resource or not.
 * @export
 * @interface ApplicationBundle
 */
export interface ApplicationBundle {
    /**
     * The resource name.
     * @type {string}
     * @memberof ApplicationBundle
     */
    name: string;
    /**
     * The bundle version.
     * @type {string}
     * @memberof ApplicationBundle
     */
    version: string;
    /**
     * Whether the bundle is in preview.
     * @type {boolean}
     * @memberof ApplicationBundle
     */
    preview?: boolean;
    /**
     * When the bundle is end-of-life.
     * @type {Date}
     * @memberof ApplicationBundle
     */
    endOfLife?: Date;
}

/**
 * Check if a given object implements the ApplicationBundle interface.
 */
export function instanceOfApplicationBundle(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function ApplicationBundleFromJSON(json: any): ApplicationBundle {
    return ApplicationBundleFromJSONTyped(json, false);
}

export function ApplicationBundleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationBundle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'version': json['version'],
        'preview': !exists(json, 'preview') ? undefined : json['preview'],
        'endOfLife': !exists(json, 'endOfLife') ? undefined : (new Date(json['endOfLife'])),
    };
}

export function ApplicationBundleToJSON(value?: ApplicationBundle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'version': value.version,
        'preview': value.preview,
        'endOfLife': value.endOfLife === undefined ? undefined : (value.endOfLife.toISOString()),
    };
}

