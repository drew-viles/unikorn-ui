/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Generic error message.
 * @export
 * @interface Oauth2Error
 */
export interface Oauth2Error {
    /**
     * A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
     * @type {string}
     * @memberof Oauth2Error
     */
    error: Oauth2ErrorErrorEnum;
    /**
     * Verbose message describing the error.
     * @type {string}
     * @memberof Oauth2Error
     */
    errorDescription: string;
}


/**
 * @export
 */
export const Oauth2ErrorErrorEnum = {
    InvalidRequest: 'invalid_request',
    UnauthorizedClient: 'unauthorized_client',
    AccessDenied: 'access_denied',
    UnsupportedResponseType: 'unsupported_response_type',
    InvalidScope: 'invalid_scope',
    ServerError: 'server_error',
    TemporarilyUnavailable: 'temporarily_unavailable',
    InvalidClient: 'invalid_client',
    InvalidGrant: 'invalid_grant',
    UnsupportedGrantType: 'unsupported_grant_type',
    NotFound: 'not_found',
    Conflict: 'conflict',
    MethodNotAllowed: 'method_not_allowed',
    UnsupportedMediaType: 'unsupported_media_type',
    Forbidden: 'forbidden'
} as const;
export type Oauth2ErrorErrorEnum = typeof Oauth2ErrorErrorEnum[keyof typeof Oauth2ErrorErrorEnum];


/**
 * Check if a given object implements the Oauth2Error interface.
 */
export function instanceOfOauth2Error(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "error" in value;
    isInstance = isInstance && "errorDescription" in value;

    return isInstance;
}

export function Oauth2ErrorFromJSON(json: any): Oauth2Error {
    return Oauth2ErrorFromJSONTyped(json, false);
}

export function Oauth2ErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Oauth2Error {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': json['error'],
        'errorDescription': json['error_description'],
    };
}

export function Oauth2ErrorToJSON(value?: Oauth2Error | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'error_description': value.errorDescription,
    };
}

