/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An OpenStack flavor.
 * @export
 * @interface OpenstackFlavor
 */
export interface OpenstackFlavor {
    /**
     * The unique flavor ID.
     * @type {string}
     * @memberof OpenstackFlavor
     */
    id: string;
    /**
     * The flavor name.
     * @type {string}
     * @memberof OpenstackFlavor
     */
    name: string;
    /**
     * The number of CPUs.
     * @type {number}
     * @memberof OpenstackFlavor
     */
    cpus: number;
    /**
     * The amount of memory in GiB.
     * @type {number}
     * @memberof OpenstackFlavor
     */
    memory: number;
    /**
     * The amount of ephemeral disk in GB.
     * @type {number}
     * @memberof OpenstackFlavor
     */
    disk: number;
    /**
     * The number of GPUs, if not set there are none.
     * @type {number}
     * @memberof OpenstackFlavor
     */
    gpus?: number;
}

/**
 * Check if a given object implements the OpenstackFlavor interface.
 */
export function instanceOfOpenstackFlavor(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "cpus" in value;
    isInstance = isInstance && "memory" in value;
    isInstance = isInstance && "disk" in value;

    return isInstance;
}

export function OpenstackFlavorFromJSON(json: any): OpenstackFlavor {
    return OpenstackFlavorFromJSONTyped(json, false);
}

export function OpenstackFlavorFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenstackFlavor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'cpus': json['cpus'],
        'memory': json['memory'],
        'disk': json['disk'],
        'gpus': !exists(json, 'gpus') ? undefined : json['gpus'],
    };
}

export function OpenstackFlavorToJSON(value?: OpenstackFlavor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'cpus': value.cpus,
        'memory': value.memory,
        'disk': value.disk,
        'gpus': value.gpus,
    };
}

