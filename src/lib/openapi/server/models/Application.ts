/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationTags } from './ApplicationTags';
import {
    ApplicationTagsFromJSON,
    ApplicationTagsFromJSONTyped,
    ApplicationTagsToJSON,
} from './ApplicationTags';
import type { ApplicationVersions } from './ApplicationVersions';
import {
    ApplicationVersionsFromJSON,
    ApplicationVersionsFromJSONTyped,
    ApplicationVersionsToJSON,
} from './ApplicationVersions';

/**
 * An application.
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * Unique application name.
     * @type {string}
     * @memberof Application
     */
    name: string;
    /**
     * Human readable application name.
     * @type {string}
     * @memberof Application
     */
    humanReadableName: string;
    /**
     * Verbose description of what the application provides.
     * @type {string}
     * @memberof Application
     */
    description: string;
    /**
     * Documentation link for the application.
     * @type {string}
     * @memberof Application
     */
    documentation: string;
    /**
     * The license under which the application is released.
     * @type {string}
     * @memberof Application
     */
    license: string;
    /**
     * A base64 encoded SVG icon.  This should work in both light and dark themes.
     * @type {string}
     * @memberof Application
     */
    icon: string;
    /**
     * 
     * @type {ApplicationVersions}
     * @memberof Application
     */
    versions: ApplicationVersions;
    /**
     * 
     * @type {ApplicationTags}
     * @memberof Application
     */
    tags?: ApplicationTags;
}

/**
 * Check if a given object implements the Application interface.
 */
export function instanceOfApplication(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "humanReadableName" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "documentation" in value;
    isInstance = isInstance && "license" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "versions" in value;

    return isInstance;
}

export function ApplicationFromJSON(json: any): Application {
    return ApplicationFromJSONTyped(json, false);
}

export function ApplicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Application {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'humanReadableName': json['humanReadableName'],
        'description': json['description'],
        'documentation': json['documentation'],
        'license': json['license'],
        'icon': json['icon'],
        'versions': ApplicationVersionsFromJSON(json['versions']),
        'tags': !exists(json, 'tags') ? undefined : ApplicationTagsFromJSON(json['tags']),
    };
}

export function ApplicationToJSON(value?: Application | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'humanReadableName': value.humanReadableName,
        'description': value.description,
        'documentation': value.documentation,
        'license': value.license,
        'icon': value.icon,
        'versions': ApplicationVersionsToJSON(value.versions),
        'tags': ApplicationTagsToJSON(value.tags),
    };
}

